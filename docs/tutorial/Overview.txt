.. raw:: html

   <style> .red {color:#ed5a6a; font-weight:bold} </style>
   <style> .green {color:#7ac083; font-weight:bold} </style>
   <style> .orange {color:#f98f60; font-weight:bold} </style>
   <style> .blue {color:#60c1cf; font-weight:bold} </style>

.. role:: red
.. role:: green
.. role:: orange
.. role:: blue

Overview
========

.. figure:: ../images/UML.png

   A simplified UML class diagram of the core classes of BioSTEAM.

BioSTEAM's main components can be categorized by 4 functionality levels: 

- :orange:`Automation` of the simulation of large sets of scenarios (e.g. Monte Carlo) are facilitated by :doc:`../evaluation/Model` objects which define Parameter and Metric objects that dictate the input and output features of the model. The Model object sets parameters, simulates a System object, and returns metrics results.

- :red:`Simulation` of a production process is carried out by :doc:`../System` objects. These are created in BioSTEAM without having to supply any information on the order of unit simulation. When a System object is simulated, elements in the path are run sequentially within an iterative solver until the recycle stream converges (in both component flow rates and temperature). After simulation, :doc:`../TEA` objects can perform cashflow analysis to solve for number of financial indicators.

- :blue:`Equipment` design, costing, and utility requirements are evaluated by :doc:`../Unit` objects. All built-in and custom unit operations are subclasses of Unit. - Adjustments can be made to the available heating and cooling agents of the :doc:`../HeatUtility` class (e.g., steam pressure, cooling water temperature, price) as well as the electricity price of the :doc:`../PowerUtility` class.

- :green:`Thermodynamic` equilibrium and mass and energy balances are facilitated by `Stream <https://thermosteam.readthedocs.io/en/latest/Stream.html>`_ objects, which define material flows along with their temperature and pressure. All data on chemicals, fitted coefficients, and functions to estimate chemical properties are imported from `thermo <https://thermo.readthedocs.io/>`_, a community-driven open-source library developed by Caleb Bell. 


