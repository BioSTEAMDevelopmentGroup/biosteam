:py:class:`float`, optional  (Optional[float])
:py:class:`~biosteam.HXutility`, optional  (Optional[HXutility])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`~biosteam._heat_utility.UtilityAgent`  (<class biosteam._heat_utility.UtilityAgent>)
:py:class:`~biosteam._heat_utility.UtilityAgent`, optional  (typing.Union[biosteam._heat_utility.UtilityAgent, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`~biosteam._heat_utility.UtilityAgent`  (<class biosteam._heat_utility.UtilityAgent>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`~biosteam._power_utility.PowerUtility`  (<class biosteam._power_utility.PowerUtility>)
:py:class:`int`  (<class int>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`, optional  (Optional[str])
:py:class:`Iterable`\[:py:class:`~biosteam.Unit` | :py:class:`~biosteam.System`], optional  (Optional[Iterable[Unit | System]])
Stream, optional  (Optional[Stream])
:py:class:`Iterable`\[Facility]  (Iterable[Facility])
Stream, optional  (Optional[Stream])
:py:class:`int`, optional  (Optional[int])
:py:class:`float`, optional  (Optional[float])
:py:class:`float`, optional  (Optional[float])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~biosteam._facility.Facility`  (<class biosteam._facility.Facility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._facility.Facility`]  (typing.Iterable[biosteam._facility.Facility])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._unit.Unit`]  (typing.Iterable[biosteam._unit.Unit])
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._unit.Unit`], optional  (typing.Union[typing.Iterable[biosteam._unit.Unit], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`, optional  (typing.Union[biosteam._unit.Unit, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`, optional  (typing.Union[biosteam._unit.Unit, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`~biosteam._system.System`  (<class biosteam._system.System>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`bool`  (<class bool>)
:py:class:`int`  (<class int>)
:py:class:`int`, optional  (typing.Union[int, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam.TEA`  (TEA)
:py:data:`~typing.:py:class:`Callable``  (typing.Callable)
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
Stream | None  (Stream | None)
:py:class:`int` | None  (int | None)
:py:class:`list`\[:py:class:`~biosteam.Unit` | :py:class:`~biosteam.System`]  (list[Unit | System])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`bool`  (<class bool>)
:py:class:`int` | :py:class:`str`, optional  (Optional[int | str])
:py:class:`str`, optional  (Optional[str])
:py:class:`str`, optional  (Optional[str])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`str`, optional  (Optional[str])
:py:class:`~biosteam._system.MaterialData`  (<class biosteam._system.MaterialData>)
:py:class:`~biosteam._system.MaterialData`, optional  (typing.Union[biosteam._system.MaterialData, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`float`  (<class float>)
:py:class:`~biosteam.utils.scope.SystemScope`  (<class biosteam.utils.scope.SystemScope>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:data:`~typing.:py:class:`Callable``  (typing.Callable)
:py:class:`float`  (<class float>)
:py:class:`~biosteam._power_utility.PowerUtility`  (<class biosteam._power_utility.PowerUtility>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:data:`~typing.:py:class:`Callable``  (typing.Callable)
:py:data:`~typing.:py:class:`Callable``, optional  (typing.Union[typing.Callable, NoneType])
:py:class:`bool`  (<class bool>)
:py:class:`bool`, optional  (typing.Union[bool, NoneType])
:py:class:`tuple`  (<class tuple>)
:py:class:`tuple`, optional  (typing.Union[tuple, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Sequence`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Sequence[thermosteam._stream.Stream])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Sequence`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Sequence[thermosteam._stream.Stream])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:data:`~typing.:py:class:`Callable``  (typing.Callable)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`int`  (<class int>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`, optional  (Optional[str])
:py:class:`Iterable`\[:py:class:`~biosteam.Unit` | :py:class:`~biosteam.System`], optional  (Optional[Iterable[Unit | System]])
Stream, optional  (Optional[Stream])
:py:class:`Iterable`\[Facility]  (Iterable[Facility])
Stream, optional  (Optional[Stream])
:py:class:`int`, optional  (Optional[int])
:py:class:`float`, optional  (Optional[float])
:py:class:`float`, optional  (Optional[float])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~biosteam._facility.Facility`  (<class biosteam._facility.Facility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._facility.Facility`]  (typing.Iterable[biosteam._facility.Facility])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._unit.Unit`]  (typing.Iterable[biosteam._unit.Unit])
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._unit.Unit`], optional  (typing.Union[typing.Iterable[biosteam._unit.Unit], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`, optional  (typing.Union[biosteam._unit.Unit, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`, optional  (typing.Union[biosteam._unit.Unit, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`~biosteam._system.System`  (<class biosteam._system.System>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`bool`  (<class bool>)
:py:class:`int`  (<class int>)
:py:class:`int`, optional  (typing.Union[int, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam.TEA`  (TEA)
:py:data:`~typing.:py:class:`Callable``  (typing.Callable)
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
Stream | None  (Stream | None)
:py:class:`int` | None  (int | None)
:py:class:`list`\[:py:class:`~biosteam.Unit` | :py:class:`~biosteam.System`]  (list[Unit | System])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`bool`  (<class bool>)
:py:class:`int` | :py:class:`str`, optional  (Optional[int | str])
:py:class:`str`, optional  (Optional[str])
:py:class:`str`, optional  (Optional[str])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`str`, optional  (Optional[str])
:py:class:`~biosteam._system.MaterialData`  (<class biosteam._system.MaterialData>)
:py:class:`~biosteam._system.MaterialData`, optional  (typing.Union[biosteam._system.MaterialData, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`float`  (<class float>)
:py:class:`~biosteam.utils.scope.SystemScope`  (<class biosteam.utils.scope.SystemScope>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:data:`~typing.:py:class:`Callable``  (typing.Callable)
:py:class:`float`  (<class float>)
:py:class:`~biosteam._power_utility.PowerUtility`  (<class biosteam._power_utility.PowerUtility>)
:py:class:`str`  (str)
:py:class:`Sequence`\[:py:class:`str`] | :py:class:`str`, optional  (Optional[Sequence[str] | str])
:py:class:`str`  (str)
:py:class:`Sequence`\[:py:class:`str`] | :py:class:`str`, optional  (Optional[Sequence[str] | str])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:data:`~typing.:py:class:`Callable``  (typing.Callable)
:py:data:`~typing.:py:class:`Callable``, optional  (typing.Union[typing.Callable, NoneType])
:py:class:`bool`  (<class bool>)
:py:class:`bool`, optional  (typing.Union[bool, NoneType])
:py:class:`tuple`  (<class tuple>)
:py:class:`tuple`, optional  (typing.Union[tuple, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Sequence`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Sequence[thermosteam._stream.Stream])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Sequence`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Sequence[thermosteam._stream.Stream])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:data:`~typing.:py:class:`Callable``  (typing.Callable)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`int`  (<class int>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`float`, optional  (Optional[float])
:py:class:`~biosteam.HXutility`, optional  (Optional[HXutility])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`~biosteam._heat_utility.UtilityAgent`  (<class biosteam._heat_utility.UtilityAgent>)
:py:class:`~biosteam._heat_utility.UtilityAgent`, optional  (typing.Union[biosteam._heat_utility.UtilityAgent, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`~biosteam._heat_utility.UtilityAgent`  (<class biosteam._heat_utility.UtilityAgent>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`~biosteam._power_utility.PowerUtility`  (<class biosteam._power_utility.PowerUtility>)
:py:class:`int`  (<class int>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`, optional  (Optional[str])
:py:class:`Iterable`\[:py:class:`~biosteam.Unit` | :py:class:`~biosteam.System`], optional  (Optional[Iterable[Unit | System]])
Stream, optional  (Optional[Stream])
:py:class:`Iterable`\[Facility]  (Iterable[Facility])
Stream, optional  (Optional[Stream])
:py:class:`int`, optional  (Optional[int])
:py:class:`float`, optional  (Optional[float])
:py:class:`float`, optional  (Optional[float])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~biosteam._facility.Facility`  (<class biosteam._facility.Facility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._facility.Facility`]  (typing.Iterable[biosteam._facility.Facility])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._unit.Unit`]  (typing.Iterable[biosteam._unit.Unit])
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._unit.Unit`], optional  (typing.Union[typing.Iterable[biosteam._unit.Unit], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`, optional  (typing.Union[biosteam._unit.Unit, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`, optional  (typing.Union[biosteam._unit.Unit, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`~biosteam._system.System`  (<class biosteam._system.System>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`bool`  (<class bool>)
:py:class:`int`  (<class int>)
:py:class:`int`, optional  (typing.Union[int, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam.TEA`  (TEA)
:py:data:`~typing.Callable`  (typing.Callable)
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
Stream | None  (Stream | None)
:py:class:`int` | None  (int | None)
:py:class:`list`\[:py:class:`~biosteam.Unit` | :py:class:`~biosteam.System`]  (list[Unit | System])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`bool`  (<class bool>)
:py:class:`int` | :py:class:`str`, optional  (Optional[int | str])
:py:class:`str`, optional  (Optional[str])
:py:class:`str`, optional  (Optional[str])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`str`, optional  (Optional[str])
:py:class:`~biosteam._system.MaterialData`  (<class biosteam._system.MaterialData>)
:py:class:`~biosteam._system.MaterialData`, optional  (typing.Union[biosteam._system.MaterialData, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`float`  (<class float>)
:py:class:`~biosteam.utils.scope.SystemScope`  (<class biosteam.utils.scope.SystemScope>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:data:`~typing.Callable`  (typing.Callable)
:py:class:`float`  (<class float>)
:py:class:`~biosteam._power_utility.PowerUtility`  (<class biosteam._power_utility.PowerUtility>)
:py:class:`str`  (str)
:py:class:`Sequence`\[:py:class:`str`] | :py:class:`str`, optional  (Optional[Sequence[str] | str])
:py:class:`str`  (str)
:py:class:`Sequence`\[:py:class:`str`] | :py:class:`str`, optional  (Optional[Sequence[str] | str])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:data:`~typing.Callable`  (typing.Callable)
:py:data:`~typing.Callable`, optional  (typing.Union[typing.Callable, NoneType])
:py:class:`bool`  (<class bool>)
:py:class:`bool`, optional  (typing.Union[bool, NoneType])
:py:class:`tuple`  (<class tuple>)
:py:class:`tuple`, optional  (typing.Union[tuple, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Sequence`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Sequence[thermosteam._stream.Stream])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Sequence`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Sequence[thermosteam._stream.Stream])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:data:`~typing.Callable`  (typing.Callable)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`int`  (<class int>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`int`  (<class int>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`float`, optional  (Optional[float])
:py:class:`~biosteam.HXutility`, optional  (Optional[HXutility])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`~biosteam._heat_utility.UtilityAgent`  (<class biosteam._heat_utility.UtilityAgent>)
:py:class:`~biosteam._heat_utility.UtilityAgent`, optional  (typing.Union[biosteam._heat_utility.UtilityAgent, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`~biosteam._heat_utility.UtilityAgent`  (<class biosteam._heat_utility.UtilityAgent>)
:py:class:`~biosteam._heat_utility.HeatUtility`  (<class biosteam._heat_utility.HeatUtility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._heat_utility.HeatUtility`]  (typing.Iterable[biosteam._heat_utility.HeatUtility])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`~biosteam._power_utility.PowerUtility`  (<class biosteam._power_utility.PowerUtility>)
:py:class:`int`  (<class int>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`, optional  (Optional[str])
:py:class:`Iterable`\[:py:class:`~biosteam.Unit` | :py:class:`~biosteam.System`], optional  (Optional[Iterable[Unit | System]])
Stream, optional  (Optional[Stream])
:py:class:`Iterable`\[:py:class:`~biosteam.Facility`]  (Iterable[Facility])
Stream, optional  (Optional[Stream])
:py:class:`int`, optional  (Optional[int])
:py:class:`float`, optional  (Optional[float])
:py:class:`float`, optional  (Optional[float])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~biosteam._facility.Facility`  (<class biosteam._facility.Facility>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._facility.Facility`]  (typing.Iterable[biosteam._facility.Facility])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._unit.Unit`]  (typing.Iterable[biosteam._unit.Unit])
:py:class:`~typing.Iterable`\[:py:class:`~biosteam._unit.Unit`], optional  (typing.Union[typing.Iterable[biosteam._unit.Unit], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Iterable[thermosteam._stream.Stream])
:py:class:`~typing.Iterable`\[:py:class:`~thermosteam._stream.Stream`], optional  (typing.Union[typing.Iterable[thermosteam._stream.Stream], NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`, optional  (typing.Union[thermosteam._stream.Stream, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`, optional  (typing.Union[biosteam._unit.Unit, NoneType])
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`, optional  (typing.Union[biosteam._unit.Unit, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`~biosteam._system.System`  (<class biosteam._system.System>)
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`bool`  (<class bool>)
:py:class:`int`  (<class int>)
:py:class:`int`, optional  (typing.Union[int, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`, optional  (typing.Union[float, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~biosteam.TEA`  (TEA)
:py:data:`~typing.Callable`  (typing.Callable)
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~biosteam._unit.Unit`  (<class biosteam._unit.Unit>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
Stream | None  (Stream | None)
:py:class:`int` | None  (int | None)
:py:class:`list`\[:py:class:`~biosteam.Unit` | :py:class:`~biosteam.System`]  (list[Unit | System])
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`bool`  (<class bool>)
:py:class:`int` | :py:class:`str`, optional  (Optional[int | str])
:py:class:`str`, optional  (Optional[str])
:py:class:`str`, optional  (Optional[str])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`bool`, optional  (Optional[bool])
:py:class:`str`, optional  (Optional[str])
:py:class:`~biosteam._system.MaterialData`  (<class biosteam._system.MaterialData>)
:py:class:`~biosteam._system.MaterialData`, optional  (typing.Union[biosteam._system.MaterialData, NoneType])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`float`  (<class float>)
:py:class:`~biosteam.utils.scope.SystemScope`  (<class biosteam.utils.scope.SystemScope>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:data:`~typing.Callable`  (typing.Callable)
:py:class:`float`  (<class float>)
:py:class:`~biosteam._power_utility.PowerUtility`  (<class biosteam._power_utility.PowerUtility>)
:py:class:`str`  (str)
:py:class:`Sequence`\[:py:class:`str`] | :py:class:`str`, optional  (Optional[Sequence[str] | str])
:py:class:`str`  (str)
:py:class:`Sequence`\[:py:class:`str`] | :py:class:`str`, optional  (Optional[Sequence[str] | str])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:data:`~typing.Callable`  (typing.Callable)
:py:data:`~typing.Callable`, optional  (typing.Union[typing.Callable, NoneType])
:py:class:`bool`  (<class bool>)
:py:class:`bool`, optional  (typing.Union[bool, NoneType])
:py:class:`tuple`  (<class tuple>)
:py:class:`tuple`, optional  (typing.Union[tuple, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Sequence`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Sequence[thermosteam._stream.Stream])
:py:class:`~thermosteam._stream.Stream`  (<class thermosteam._stream.Stream>)
:py:class:`~typing.Sequence`\[:py:class:`~thermosteam._stream.Stream`]  (typing.Sequence[thermosteam._stream.Stream])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:data:`~typing.Any`  (typing.Any)
:py:class:`float`  (<class float>)
:py:class:`~numpy.dtype`\[:py:class:`float`]  (numpy.dtype[float])
:py:class:`~numpy.ndarray`\[:py:data:`~typing.Any`, :py:class:`~numpy.dtype`\[:py:class:`float`]]  (numpy.ndarray[typing.Any, numpy.dtype[float]])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`bool`  (<class bool>)
:py:class:`bool`  (<class bool>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`float`  (<class float>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:data:`~typing.Callable`  (typing.Callable)
:py:class:`str`  (<class str>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`str`  (<class str>)
:py:class:`float`  (<class float>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`dict`  (<class dict>)
:py:class:`int`  (<class int>)
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
:py:class:`str`  (<class str>)
:py:class:`str`, optional  (typing.Union[str, NoneType])
:py:class:`~thermosteam._thermo.Thermo`  (<class thermosteam._thermo.Thermo>)
:py:class:`~thermosteam._thermo.Thermo`, optional  (typing.Union[thermosteam._thermo.Thermo, NoneType])
